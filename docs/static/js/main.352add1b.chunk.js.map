{"version":3,"sources":["components/Error/index.tsx","components/Error/Error.tsx","components/Form/index.tsx","components/Form/Form.tsx","components/Header/index.tsx","components/Header/Header.tsx","Utils/Utils.tsx","components/Weather/index.tsx","components/Weather/Weather.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Error","props","react_default","a","createElement","className","message","Form","city","React","createRef","country","search","e","preventDefault","params","_this","current","value","trim","weatherParams","onSubmit","this","ref","type","id","htmlFor","name","defaultValue","Component","Header","title","Utils","getUrl","concat","process","kelvinToCelcius","kelvin","toFixed","getWeatherIcon","iconId","Weather","showResult","_this$props$weatherDa","weatherData","weather","main","temp","src","icon","alt","temp_max","temp_min","App","state","paramsError","setState","requestApi","url","fetch","then","response","json","catch","error","console","log","hasError","components_Header","components_Form","conditionalComponent","cod","components_Error","components_Weather","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.352add1b.chunk.js","sourcesContent":["import Error from './Error';\nexport default Error;\n","import React from 'react';\nimport './Error.css';\n\ninterface IProps {\n    message: string;\n}\n\nconst Error = (props: IProps) => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col s12 m6 offset-m3\">\n                    <div className=\"card-panel red darken-4 error\">\n                        {props.message}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Error;\n","import Form from './Form';\nexport default Form;\n","import React, { Component, FormEvent } from 'react';\nimport { IWeatherParams } from '../../interfaces';\nimport './Form.css';\n\ninterface IProps {\n    weatherParams: (params: IWeatherParams) => void;\n}\n\nclass Form extends Component<IProps> {\n\n    private city = React.createRef<HTMLInputElement>();\n    private country = React.createRef<HTMLSelectElement>();\n\n    public search = (e: FormEvent) => {\n        e.preventDefault();\n\n        const city = this.city.current!.value.trim();\n        const country = this.country.current!.value.trim();\n\n        const params: IWeatherParams = { city, country };\n\n        this.props.weatherParams(params);\n    }\n\n    public render() {\n        return (\n            <div className=\"contenedor-form\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <form onSubmit={this.search}>\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\n                                <input ref={this.city} type=\"text\" id=\"city\" />\n                                <label htmlFor=\"city\">Ciudad</label>\n                            </div>\n\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\n                                <select ref={this.country} name=\"country\" id=\"country\">\n                                    <option value=\"\" defaultValue=\"true\">Elije un País</option>\n                                    <option value=\"AR\">Argentina</option>\n                                    <option value=\"PE\">Perú</option>\n                                    <option value=\"MX\">México</option>\n                                    <option value=\"CO\">Colombia</option>\n                                    <option value=\"CR\">Costa Rica</option>\n                                    <option value=\"ES\">España</option>\n                                    <option value=\"US\">Estados Unidos</option>\n                                </select>\n                                <label htmlFor=\"country\">País</label>\n                            </div>\n\n                            <div className=\"input-field col s12 m8 l4 offset-2 buscador\">\n                                <input type=\"submit\" className=\"waves-effect waves-light btn btn-large yellow accent-4\" value=\"Bucar...\" />\n                            </div>\n                        </form>\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Form;\n","import Header from './Header';\nexport default Header;\n","import React from 'react';\nimport './Header.css';\n\nexport interface IProps {\n    title: string;\n}\n\nconst Header = (props: IProps) => {\n    return (\n        <div>\n            <nav>\n                <div className=\"nav-wrapper light-blue darken-2\">\n                    <a className=\"brand-logo\">{props.title}</a>\n                </div>\n            </nav>\n        </div>\n    );\n};\n\nexport default Header;\n","import { IWeatherParams } from '../interfaces';\n\nexport default class Utils {\n    public static getUrl = (params: IWeatherParams): string => {\n        return `${process.env.REACT_APP_OPENWEATHER_API}?q=${params.city},${params.country}&appid=${process.env.REACT_APP_OPENWEATHER_APIKEY}`;\n    }\n\n    public static kelvinToCelcius = (kelvin: number): string => {\n        return (kelvin - 273.15).toFixed(2);\n    }\n\n    public static getWeatherIcon = (iconId: string): string => {\n        return `http://openweathermap.org/img/w/${iconId}.png`;\n    }\n}\n","import Weather from './Weather';\nexport default Weather;\n","import React, { Component } from 'react';\nimport Utils from '../../Utils/Utils';\nimport './Weather.css';\n\ninterface IProps {\n    weatherData: any;\n}\n\nclass Weather extends Component<IProps> {\n\n    public render() {\n        return (\n            <div className=\"container\">\n                {this.showResult()}\n            </div>\n        );\n    }\n\n    private showResult = () => {\n        const { name, weather, main } = this.props.weatherData;\n        if (!name || !weather || !main) {\n            return;\n        }\n        return (\n            <div className=\"row\">\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\n                    <div className=\"card-panel light-blue align-center\">\n                        <span className=\"white-text\">\n                            <h2>Resultado Clima de: {name}</h2>\n                            <p className=\"temperatura\">\n                                Actual: {Utils.kelvinToCelcius(main.temp)} &deg;C\n                                <img src={Utils.getWeatherIcon(weather[0].icon)} alt=\"\" />\n                            </p>\n                            <p>Max. {Utils.kelvinToCelcius(main.temp_max)} &deg;C</p>\n                            <p>Min. {Utils.kelvinToCelcius(main.temp_min)} &deg;C</p>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Weather;\n","import React, { Component } from 'react';\nimport Error from './components/Error';\nimport Form from './components/Form';\nimport Header from './components/Header/';\nimport Weather from './components/Weather/';\nimport { IWeatherParams } from './interfaces';\nimport Utils from './Utils/Utils';\n\ninterface IAppState {\n    params: IWeatherParams;\n    paramsError: boolean;\n    weatherData: any;\n}\n\nclass App extends Component<{}, IAppState> {\n\n    public state: IAppState = {\n        params: {},\n        paramsError: false,\n        weatherData: {}\n    };\n\n    public render() {\n        const hasError = this.state.paramsError;\n\n        return (\n            <div className=\"app\">\n                <Header title=\"Clima React\" />\n                <Form weatherParams={this.weatherParams} />\n                {this.conditionalComponent(hasError)}\n            </div>\n        );\n    }\n\n    private weatherParams = (params: IWeatherParams) => {\n        if (!params.city || !params.country) {\n            this.setState({ paramsError: true });\n        } else {\n            this.setState({ paramsError: false, params });\n            this.requestApi(params);\n        }\n    }\n\n    private requestApi = (params: IWeatherParams) => {\n        const url = Utils.getUrl(params);\n\n        fetch(url).then((response) => {\n            return response.json();\n        }).then((weatherData) => {\n            this.setState({ weatherData });\n        }).catch((error) => {\n            console.log(error);\n        });\n\n    }\n\n    private conditionalComponent(hasError: boolean) {\n        const { cod } = this.state.weatherData;\n\n        if (hasError) {\n            return <Error message=\"Ambos campos son obligatorios\" />;\n        } else if (cod === '404') {\n            return <Error message=\"Ciudad no encontrada\" />;\n        } else {\n            return <Weather weatherData={this.state.weatherData} />;\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './css/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}